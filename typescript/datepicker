/// <reference path="typings/moment/moment.d.ts" />
/// <reference path="typings/jquery/jquery.d.ts" />
/// <reference path="typings/knockout/knockout.d.ts"/>

/**
* class DateTimePickerWidget
*/
class DateTimePickerWidget {
  public Dates: KnockoutObservableArray<Moment[]>;
  constructor(){
          this.Dates = ko.observableArray(new Array());
          var momentArray: Moment[][] = [[], [], [], [], [], []];
          var firstDayInMonth = this.CurrentDate().clone().startOf('month');

        var iStartingWeekDayNumber: number = firstDayInMonth.weekday();
        if (iStartingWeekDayNumber == 0)
            iStartingWeekDayNumber = 7;
        var startingDayInPreviousMonth = firstDayInMonth.add(-iStartingWeekDayNumber, 'd');

        var tempDay = startingDayInPreviousMonth;
        // Copy over the hours, minutes & seconds of the current date so that when the user selects the new date the time component is preserved.
        tempDay.hours(this.CurrentDate().hours());
        tempDay.minutes(this.CurrentDate().minutes());
        tempDay.seconds(this.CurrentDate().seconds());

        for (var indexRow: number = 0; indexRow < 6; indexRow++) {
            for (var indexColumn: number = 0; indexColumn < 7; indexColumn++) {
                var tempDayCloned = tempDay.clone();
                momentArray[indexRow].push(tempDayCloned);
                tempDay.add(1, "d");
            }
        }

        this.Dates(momentArray);
  }
}